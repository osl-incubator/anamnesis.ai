name: main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-branch:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: check-pr-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if the PR's branch is updated
        uses: osl-incubator/gh-check-pr-is-updated@1.0.0
        with:
          remote_branch: origin/main
          pr_sha: ${{ github.event.pull_request.head.sha }}

  tests:
    needs: check-branch
    timeout-minutes: 10
    strategy:
      matrix:
        python_version:
          - "3.8.1"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        os:
          - "ubuntu"
          - "macos"
          # - "windows"
    runs-on: ${{ matrix.os }}-latest
    concurrency:
      group: ci-tests-${{ matrix.os }}-${{ matrix.python_version }}-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3

      - name: Install MacOS extra tools and add extra setup
        if: ${{ matrix.os == 'macos' }}
        run: |
          sudo mkdir -p /tmp
          sudo chmod 777 /tmp

          brew install gnu-sed
          echo 'export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"' >> ~/.bashrc
          echo 'export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"' >> ~/.bash_profile

      - name: Prepare conda environment (windows)
        if: ${{ matrix.os == 'windows' }}
        run: |
          $env:Path += ";C:\Program Files\Git\usr\bin"
          sed -i s/python\ 3\.8\.1/python\ ${{ matrix.python_version }}/ conda/dev.yaml
          cat conda/dev.yaml

      - name: Prepare conda environment
        if: ${{ matrix.os != 'windows' }}
        run: |
          sed -i s/python\ 3\.8\.1/python\ ${{ matrix.python_version }}/ conda/dev.yaml
          cat conda/dev.yaml

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: anamnesisai
          auto-update-conda: true
          conda-solver: libmamba

      - name: Install dependencies
        run: poetry install

      - name: Run unit tests
        run: makim tests.unittest

      - name: Test jupyter notebooks
        run: makim tests.notebooks

  linter-and-docs:
    needs: check-branch
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        shell: bash -l {0}

    concurrency:
      group: ci-linter-docs-${{ matrix.os }}-${{ matrix.python_version }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: conda/dev.yaml
          channels: conda-forge,nodefaults
          activate-environment: anamnesisai
          auto-update-conda: true
          conda-solver: libmamba

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Test documentation generation
        run: makim docs.build

      - name: Run style checks
        if: success() || failure()
        run: |
          pre-commit install
          makim tests.linter

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3
